// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesDAL.Data;

#nullable disable

namespace SalesDAL.Migrations
{
    [DbContext(typeof(SalesContext))]
    [Migration("20230510205949_01")]
    partial class _01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesDAL.Data.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreditCardNumber = "6394-8733-0737-3838",
                            Email = "Wilfred.OReilly20@gmail.com",
                            Name = "Mary"
                        },
                        new
                        {
                            CustomerId = 2,
                            CreditCardNumber = "4836418057660",
                            Email = "Obie.Glover@yahoo.com",
                            Name = "Lamont"
                        },
                        new
                        {
                            CustomerId = 3,
                            CreditCardNumber = "3416-253154-85526",
                            Email = "Gilbert.Carroll@yahoo.com",
                            Name = "Glen"
                        },
                        new
                        {
                            CustomerId = 4,
                            CreditCardNumber = "3020-129001-2143",
                            Email = "Hilton_Volkman@hotmail.com",
                            Name = "Annie"
                        },
                        new
                        {
                            CustomerId = 5,
                            CreditCardNumber = "6011-7704-8723-2003",
                            Email = "Elsa.Dietrich@hotmail.com",
                            Name = "Elta"
                        },
                        new
                        {
                            CustomerId = 6,
                            CreditCardNumber = "677195535304970424",
                            Email = "Noemie_Schmeler@hotmail.com",
                            Name = "Verla"
                        },
                        new
                        {
                            CustomerId = 7,
                            CreditCardNumber = "5477-3939-7419-1738",
                            Email = "Jayce_Bosco91@yahoo.com",
                            Name = "Johnathon"
                        },
                        new
                        {
                            CustomerId = 8,
                            CreditCardNumber = "6767-1858-8137-4394-359",
                            Email = "Lucinda_Torphy@yahoo.com",
                            Name = "Amy"
                        },
                        new
                        {
                            CustomerId = 9,
                            CreditCardNumber = "6455-6204-4017-4188-2441",
                            Email = "Andreanne_Wyman@hotmail.com",
                            Name = "Cristopher"
                        },
                        new
                        {
                            CustomerId = 10,
                            CreditCardNumber = "3621-766339-4623",
                            Email = "Gustave67@gmail.com",
                            Name = "Major"
                        });
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("No description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Name = "Small Plastic Cheese",
                            Price = 766,
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = 2,
                            Name = "Handcrafted Granite Chips",
                            Price = 1824,
                            Quantity = 1
                        },
                        new
                        {
                            ProductId = 3,
                            Name = "Handcrafted Wooden Chicken",
                            Price = 1337,
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = 4,
                            Name = "Intelligent Wooden Shoes",
                            Price = 1884,
                            Quantity = 9
                        },
                        new
                        {
                            ProductId = 5,
                            Name = "Licensed Wooden Bike",
                            Price = 2973,
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = 6,
                            Name = "Awesome Cotton Car",
                            Price = 388,
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = 7,
                            Name = "Unbranded Soft Soap",
                            Price = 1291,
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = 8,
                            Name = "Intelligent Steel Computer",
                            Price = 2109,
                            Quantity = 7
                        },
                        new
                        {
                            ProductId = 9,
                            Name = "Rustic Rubber Bacon",
                            Price = 2342,
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = 10,
                            Name = "Sleek Rubber Towels",
                            Price = 448,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("SaleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            SaleId = 1,
                            CustomerId = 9,
                            Date = new DateTime(2022, 5, 17, 21, 38, 45, 326, DateTimeKind.Local).AddTicks(2068),
                            ProductId = 7,
                            StoreId = 2
                        },
                        new
                        {
                            SaleId = 2,
                            CustomerId = 4,
                            Date = new DateTime(2022, 10, 7, 14, 12, 4, 830, DateTimeKind.Local).AddTicks(8560),
                            ProductId = 1,
                            StoreId = 5
                        },
                        new
                        {
                            SaleId = 3,
                            CustomerId = 3,
                            Date = new DateTime(2022, 5, 11, 11, 21, 0, 761, DateTimeKind.Local).AddTicks(1544),
                            ProductId = 10,
                            StoreId = 10
                        },
                        new
                        {
                            SaleId = 4,
                            CustomerId = 4,
                            Date = new DateTime(2022, 10, 24, 19, 55, 38, 596, DateTimeKind.Local).AddTicks(2228),
                            ProductId = 4,
                            StoreId = 3
                        },
                        new
                        {
                            SaleId = 5,
                            CustomerId = 4,
                            Date = new DateTime(2022, 11, 22, 11, 35, 8, 194, DateTimeKind.Local).AddTicks(2090),
                            ProductId = 10,
                            StoreId = 3
                        },
                        new
                        {
                            SaleId = 6,
                            CustomerId = 10,
                            Date = new DateTime(2023, 2, 10, 19, 37, 59, 168, DateTimeKind.Local).AddTicks(7500),
                            ProductId = 10,
                            StoreId = 7
                        },
                        new
                        {
                            SaleId = 7,
                            CustomerId = 1,
                            Date = new DateTime(2022, 10, 4, 16, 24, 20, 431, DateTimeKind.Local).AddTicks(887),
                            ProductId = 9,
                            StoreId = 2
                        },
                        new
                        {
                            SaleId = 8,
                            CustomerId = 9,
                            Date = new DateTime(2023, 2, 7, 18, 16, 55, 743, DateTimeKind.Local).AddTicks(4442),
                            ProductId = 9,
                            StoreId = 5
                        },
                        new
                        {
                            SaleId = 9,
                            CustomerId = 1,
                            Date = new DateTime(2023, 5, 5, 4, 28, 40, 232, DateTimeKind.Local).AddTicks(7027),
                            ProductId = 7,
                            StoreId = 6
                        },
                        new
                        {
                            SaleId = 10,
                            CustomerId = 8,
                            Date = new DateTime(2022, 10, 15, 10, 30, 53, 544, DateTimeKind.Local).AddTicks(4896),
                            ProductId = 3,
                            StoreId = 5
                        });
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Name = "Wiza LLC"
                        },
                        new
                        {
                            StoreId = 2,
                            Name = "Schmidt and Sons"
                        },
                        new
                        {
                            StoreId = 3,
                            Name = "Beatty Group"
                        },
                        new
                        {
                            StoreId = 4,
                            Name = "Grimes, Wiegand and Ratke"
                        },
                        new
                        {
                            StoreId = 5,
                            Name = "Von Group"
                        },
                        new
                        {
                            StoreId = 6,
                            Name = "Stiedemann, Kunze and Toy"
                        },
                        new
                        {
                            StoreId = 7,
                            Name = "Ratke, Lakin and Harber"
                        },
                        new
                        {
                            StoreId = 8,
                            Name = "Nader, Boehm and Rowe"
                        },
                        new
                        {
                            StoreId = 9,
                            Name = "Schuster Group"
                        },
                        new
                        {
                            StoreId = 10,
                            Name = "Gorczany, Auer and Streich"
                        });
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Sale", b =>
                {
                    b.HasOne("SalesDAL.Data.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesDAL.Data.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesDAL.Data.Entities.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Product", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Store", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
