// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesDAL.Data;

#nullable disable

namespace SalesDAL.Migrations
{
    [DbContext(typeof(SalesContext))]
    [Migration("20230510210032_ProductAddColumnDescription")]
    partial class ProductAddColumnDescription
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesDAL.Data.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreditCardNumber = "5408-1261-3734-5872",
                            Email = "Ruth1@gmail.com",
                            Name = "Shany"
                        },
                        new
                        {
                            CustomerId = 2,
                            CreditCardNumber = "5018372986071820655",
                            Email = "Ruby.Anderson76@gmail.com",
                            Name = "Carlie"
                        },
                        new
                        {
                            CustomerId = 3,
                            CreditCardNumber = "6771-8918-5946-5912",
                            Email = "Wilhelm4@yahoo.com",
                            Name = "Sterling"
                        },
                        new
                        {
                            CustomerId = 4,
                            CreditCardNumber = "3760-383430-64347",
                            Email = "Kamron_Zieme93@gmail.com",
                            Name = "Lincoln"
                        },
                        new
                        {
                            CustomerId = 5,
                            CreditCardNumber = "5479-2837-6770-9077",
                            Email = "Thalia65@gmail.com",
                            Name = "Karen"
                        },
                        new
                        {
                            CustomerId = 6,
                            CreditCardNumber = "3529-6659-5342-5739",
                            Email = "Mason_Paucek90@gmail.com",
                            Name = "Donny"
                        },
                        new
                        {
                            CustomerId = 7,
                            CreditCardNumber = "4925828234793",
                            Email = "Antonia46@hotmail.com",
                            Name = "Ora"
                        },
                        new
                        {
                            CustomerId = 8,
                            CreditCardNumber = "3528-9834-0586-8062",
                            Email = "Felipa_Treutel10@gmail.com",
                            Name = "Diego"
                        },
                        new
                        {
                            CustomerId = 9,
                            CreditCardNumber = "6373-5407-4468-4235",
                            Email = "Darrin_West@yahoo.com",
                            Name = "Ned"
                        },
                        new
                        {
                            CustomerId = 10,
                            CreditCardNumber = "6767-7113-1686-6849",
                            Email = "Kevon10@yahoo.com",
                            Name = "Keira"
                        });
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValue("No description");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Name = "Generic Rubber Fish",
                            Price = 2996,
                            Quantity = 2
                        },
                        new
                        {
                            ProductId = 2,
                            Name = "Licensed Granite Chair",
                            Price = 1677,
                            Quantity = 3
                        },
                        new
                        {
                            ProductId = 3,
                            Name = "Gorgeous Wooden Table",
                            Price = 1519,
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = 4,
                            Name = "Unbranded Soft Tuna",
                            Price = 375,
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = 5,
                            Name = "Tasty Metal Bacon",
                            Price = 820,
                            Quantity = 2
                        },
                        new
                        {
                            ProductId = 6,
                            Name = "Sleek Granite Pizza",
                            Price = 1402,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 7,
                            Name = "Licensed Fresh Car",
                            Price = 1720,
                            Quantity = 4
                        },
                        new
                        {
                            ProductId = 8,
                            Name = "Handmade Fresh Fish",
                            Price = 1161,
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = 9,
                            Name = "Practical Granite Car",
                            Price = 2892,
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = 10,
                            Name = "Tasty Concrete Bacon",
                            Price = 2313,
                            Quantity = 6
                        });
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("SaleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            SaleId = 1,
                            CustomerId = 7,
                            Date = new DateTime(2023, 5, 4, 19, 5, 12, 722, DateTimeKind.Local).AddTicks(3098),
                            ProductId = 1,
                            StoreId = 5
                        },
                        new
                        {
                            SaleId = 2,
                            CustomerId = 10,
                            Date = new DateTime(2022, 11, 29, 12, 30, 31, 929, DateTimeKind.Local).AddTicks(3702),
                            ProductId = 4,
                            StoreId = 1
                        },
                        new
                        {
                            SaleId = 3,
                            CustomerId = 9,
                            Date = new DateTime(2022, 9, 27, 12, 18, 4, 757, DateTimeKind.Local).AddTicks(8535),
                            ProductId = 10,
                            StoreId = 4
                        },
                        new
                        {
                            SaleId = 4,
                            CustomerId = 6,
                            Date = new DateTime(2022, 12, 4, 13, 49, 23, 423, DateTimeKind.Local).AddTicks(8181),
                            ProductId = 10,
                            StoreId = 10
                        },
                        new
                        {
                            SaleId = 5,
                            CustomerId = 8,
                            Date = new DateTime(2022, 7, 20, 11, 23, 33, 972, DateTimeKind.Local).AddTicks(1668),
                            ProductId = 1,
                            StoreId = 10
                        },
                        new
                        {
                            SaleId = 6,
                            CustomerId = 3,
                            Date = new DateTime(2022, 11, 15, 23, 6, 8, 593, DateTimeKind.Local).AddTicks(1279),
                            ProductId = 7,
                            StoreId = 1
                        },
                        new
                        {
                            SaleId = 7,
                            CustomerId = 4,
                            Date = new DateTime(2022, 7, 4, 12, 52, 50, 709, DateTimeKind.Local).AddTicks(1762),
                            ProductId = 10,
                            StoreId = 4
                        },
                        new
                        {
                            SaleId = 8,
                            CustomerId = 7,
                            Date = new DateTime(2023, 2, 27, 0, 9, 40, 680, DateTimeKind.Local).AddTicks(2414),
                            ProductId = 4,
                            StoreId = 7
                        },
                        new
                        {
                            SaleId = 9,
                            CustomerId = 3,
                            Date = new DateTime(2023, 2, 18, 10, 36, 18, 371, DateTimeKind.Local).AddTicks(6564),
                            ProductId = 2,
                            StoreId = 9
                        },
                        new
                        {
                            SaleId = 10,
                            CustomerId = 3,
                            Date = new DateTime(2022, 6, 3, 1, 28, 43, 63, DateTimeKind.Local).AddTicks(3478),
                            ProductId = 1,
                            StoreId = 7
                        });
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("StoreId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            StoreId = 1,
                            Name = "Stark and Sons"
                        },
                        new
                        {
                            StoreId = 2,
                            Name = "Bosco LLC"
                        },
                        new
                        {
                            StoreId = 3,
                            Name = "Kreiger, Glover and Mills"
                        },
                        new
                        {
                            StoreId = 4,
                            Name = "Kulas Group"
                        },
                        new
                        {
                            StoreId = 5,
                            Name = "Christiansen, Vandervort and Kunze"
                        },
                        new
                        {
                            StoreId = 6,
                            Name = "Ritchie LLC"
                        },
                        new
                        {
                            StoreId = 7,
                            Name = "Hammes LLC"
                        },
                        new
                        {
                            StoreId = 8,
                            Name = "Leannon, Boyer and O'Kon"
                        },
                        new
                        {
                            StoreId = 9,
                            Name = "Wilkinson and Sons"
                        },
                        new
                        {
                            StoreId = 10,
                            Name = "Wilderman - Ward"
                        });
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Sale", b =>
                {
                    b.HasOne("SalesDAL.Data.Entities.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesDAL.Data.Entities.Product", "Product")
                        .WithMany("Sales")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesDAL.Data.Entities.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Product", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("SalesDAL.Data.Entities.Store", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
